// SPDX-License-Identifier: MIT
pragma solidity ^0.8.22;

import {ERC721} from "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import {ERC721Enumerable} from "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import {ReentrancyGuard} from "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import {AccessControl} from "@openzeppelin/contracts/access/AccessControl.sol";
import {Pausable} from "@openzeppelin/contracts/utils/Pausable.sol";
import {UUPSUpgradeable} from "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import {Initializable} from "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import {ERC721Upgradeable} from "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol";
import {Context} from "@openzeppelin/contracts/utils/Context.sol";
import {ContextUpgradeable} from "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol";

import "./NMMNFT.sol";

/**
 * @title Nigerian Money Market Investment Protocol
 * @dev A protocol for time-locked investments in Nigerian money markets using cNGN stablecoin
 * @notice Users deposit cNGN, receive non-transferable NFTs, and earn returns after lock period
 */
contract NigerianMoneyMarket is
    Initializable,
    ERC721Upgradeable,
    ReentrancyGuard,
    AccessControl,
    Pausable,
    UUPSUpgradeable
{
    using SafeERC20 for IERC20;
    using NMMNFTRenderer for NMMNFTRenderer.RenderParams;

    NMMNFT public nftRenderer;

    // ============ ROLES ============
    bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");
    bytes32 public constant MULTISIG_ROLE = keccak256("MULTISIG_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");

    // ============ CONSTANTS ============
    uint256 public constant MIN_INVESTMENT = 1000e18; // 1000 cNGN minimum
    uint256 public constant MAX_INVESTMENT = 10_000_000e18; // 10M cNGN maximum
    uint256 public constant BASIS_POINTS = 10000;
    uint256 public constant DEFAULT_LOCK_DURATION = 30 days;
    uint256 public constant MIN_MULTISIG_THRESHOLD = 2;
    uint256 public constant MAX_MULTISIG_SIGNERS = 10;

    // ============ STRUCTS ============
    struct Investment {
        uint256 amount; // Amount of cNGN deposited
        string title // investment title
        uint256 depositTime; // When the investment was made
        uint256 lockDuration; // Duration of the lock period
        uint256 maturityTime; // When the investment matures
        uint256 expectedReturn; // Expected return amount
        uint256 actualReturn; // Actual return (set by multisig)
        bool isWithdrawn; // Whether the investment has been withdrawn
        uint256 withdrawnAt // When the investment was withdrawn and closed.
        bool isMatured; // Whether the investment has matured
        bool fundsCollected; // Whether funds have been collected for investment
        address investor; // Address of the investor
        address collectedBy; // Address of multisig who collected funds
        uint256 collectedAt; // Timestamp when funds were collected
    }

    struct MarketConfig {
        uint256 lockDuration; // Current lock duration
        uint256 expectedRate; // Expected annual return rate in basis points
        uint256 totalDeposited; // Total amount currently deposited
        uint256 totalWithdrawn; // Total amount withdrawn
        bool acceptingDeposits; // Whether new deposits are accepted
    }

    struct MultisigConfig {
        address[] signers; // Array of authorized signers
        uint256 threshold; // Number of signatures required
        mapping(address => bool) isSigner; // Quick lookup for signers
        uint256 nonce; // Nonce for replay protection
    }

    struct Transaction {
        uint256 tokenId; // Token ID for the transaction
        address proposer; // Who proposed the transaction
        uint256 proposedAt; // When it was proposed
        uint256 executedAt; // When it was executed (0 if not executed)
        bool executed; // Whether the transaction has been executed
        TransactionType txType; // Type of transaction
        mapping(address => bool) signatures; // Signatures from multisig members
        uint256 signatureCount; // Number of signatures received
    }

    enum TransactionType {
        COLLECT_FUNDS,
        RETURN_FUNDS,
        SET_ACTUAL_RETURNS
    }

    // ============ STATE VARIABLES ============
    IERC20 public cNGN;
    uint256 public nextTokenId;
    MarketConfig public marketConfig;
    MultisigConfig public multisigConfig;

    mapping(uint256 => Investment) public investments;
    mapping(address => uint256[]) public userInvestments;
    mapping(address => uint256) public userTotalInvested;

    // Multisig transaction management
    mapping(bytes32 => Transaction) public transactions;
    mapping(uint256 => bytes32) public pendingCollections; // tokenId => transactionHash
    mapping(uint256 => bytes32) public pendingReturns; // tokenId => transactionHash

    // ============ EVENTS ============
    event InvestmentCreated(uint256 indexed tokenId, address indexed investor, uint256 amount, uint256 maturityTime);
    event InvestmentWithdrawn(uint256 indexed tokenId, address indexed investor, uint256 principal, uint256 returns_);
    event InvestmentMatured(uint256 indexed tokenId, uint256 actualReturn);

    // Enhanced multisig events
    event TransactionProposed(
        bytes32 indexed txHash, uint256 indexed tokenId, address indexed proposer, TransactionType txType
    );
    event TransactionSigned(bytes32 indexed txHash, address indexed signer, uint256 signatureCount);
    event TransactionExecuted(bytes32 indexed txHash, uint256 indexed tokenId, address indexed executor);
    event FundsCollected(uint256 indexed tokenId, address indexed collector, uint256 amount);
    event FundsReturned(uint256 indexed tokenId, address indexed returner, uint256 amount);

    event MarketConfigUpdated(uint256 lockDuration, uint256 expectedRate, bool acceptingDeposits);
    event MultisigConfigUpdated(address[] signers, uint256 threshold);

    // ============ ERRORS ============
    error InvalidAmount();
    error InvestmentNotMatured();
    error InvestmentAlreadyWithdrawn();
    error NotTokenOwner();
    error NotAuthorizedMultisig();
    error DepositsNotAccepted();
    error InvalidDuration();
    error InvalidRate();
    error InsufficientFunds();
    error TokenNotTransferable();
    error FundsAlreadyCollected();
    error FundsNotCollected();
    error InvalidMultisigConfig();
    error TransactionAlreadyExecuted();
    error TransactionNotFound();
    error AlreadySigned();
    error InsufficientSignatures();
    error InvalidTokenId();
    error InvalidTransactionType();

    // ============ MODIFIERS ============
    modifier onlyMultisigSigner() {
        if (!multisigConfig.isSigner[msg.sender]) revert NotAuthorizedMultisig();
        _;
    }

    modifier validTokenId(uint256 tokenId) {
        if (tokenId == 0 || tokenId >= nextTokenId) revert InvalidTokenId();
        _;
    }

    // ============ INITIALIZATION ============
    function initialize(
        address _cNGN,
        address _admin,
        uint256 _expectedRate,
        address[] memory _multisigSigners,
        uint256 _multisigThreshold,
        address _nftRenderer
    ) public initializer {
        __ERC721_init("Eden Finance Nigerian Money Market Position", "eCNGNP");
        __UUPSUpgradeable_init();

        cNGN = IERC20(_cNGN);
        nextTokenId = 1;

        marketConfig = MarketConfig({
            lockDuration: DEFAULT_LOCK_DURATION,
            expectedRate: _expectedRate,
            totalDeposited: 0,
            totalWithdrawn: 0,
            acceptingDeposits: true
        });

        nftRenderer = NMMNFT(_nftRenderer);
        _setupMultisig(_multisigSigners, _multisigThreshold);

        _grantRole(DEFAULT_ADMIN_ROLE, _admin);
        _grantRole(ADMIN_ROLE, _admin);
        _grantRole(PAUSER_ROLE, _admin);
    }

    // ============ NFT RENDERING ============

    /**
     * @dev Override tokenURI to return beautiful procedurally generated NFTs
     * @param tokenId The token ID to get URI for
     * @return URI for the token metadata
     */
    function tokenURI(uint256 tokenId) public view override returns (string memory) {
        _requireOwned(tokenId);
        Investment memory investment = investments[tokenId];
        NMMNFTRenderer.RenderParams memory params = NMMNFTRenderer.RenderParams({
            tokenId: tokenId,
            investor: investment.investor,
            amount: investment.amount,
            depositTime: investment.depositTime,
            maturityTime: investment.maturityTime,
            expectedReturn: investment.expectedReturn,
            actualReturn: investment.actualReturn,
            isMatured: investment.isMatured,
            isWithdrawn: investment.isWithdrawn,
            fundsCollected: investment.fundsCollected,
            lockDuration: investment.lockDuration,
            expectedRate: marketConfig.expectedRate
        });
        return nftRenderer.renderNFT(params);
    }

    // ============ INVESTMENT FUNCTIONS ============

    /**
     * @dev Create a new investment position
     * @param amount Amount of cNGN to invest
     * @return tokenId The NFT token ID representing the investment
     */
    function invest(uint256 amount) external nonReentrant whenNotPaused returns (uint256) {
        if (!marketConfig.acceptingDeposits) revert DepositsNotAccepted();
        if (amount < MIN_INVESTMENT || amount > MAX_INVESTMENT) revert InvalidAmount();

        uint256 tokenId = nextTokenId++;
        uint256 maturityTime = block.timestamp + marketConfig.lockDuration;
        uint256 expectedReturn = _calculateExpectedReturn(amount);

        investments[tokenId] = Investment({
            amount: amount,
            depositTime: block.timestamp,
            lockDuration: marketConfig.lockDuration,
            maturityTime: maturityTime,
            expectedReturn: expectedReturn,
            actualReturn: 0,
            isWithdrawn: false,
            isMatured: false,
            fundsCollected: false,
            investor: msg.sender,
            collectedBy: address(0),
            collectedAt: 0
        });

        userInvestments[msg.sender].push(tokenId);
        userTotalInvested[msg.sender] += amount;
        marketConfig.totalDeposited += amount;

        _mint(msg.sender, tokenId);
        cNGN.safeTransferFrom(msg.sender, address(this), amount);

        emit InvestmentCreated(tokenId, msg.sender, amount, maturityTime);

        return tokenId;
    }

    /**
     * @dev Withdraw matured investment
     * @param tokenId The NFT token ID to withdraw
     */
    function withdraw(uint256 tokenId) external nonReentrant validTokenId(tokenId) {
        Investment storage investment = investments[tokenId];

        if (ownerOf(tokenId) != msg.sender) revert NotTokenOwner();
        if (investment.isWithdrawn) revert InvestmentAlreadyWithdrawn();
        if (block.timestamp < investment.maturityTime) revert InvestmentNotMatured();

        investment.isWithdrawn = true;

        uint256 totalAmount = investment.amount;
        if (investment.isMatured) {
            totalAmount += investment.actualReturn;
        } else {
            totalAmount += investment.expectedReturn;
        }

        marketConfig.totalWithdrawn += totalAmount;

        _burn(tokenId);
        cNGN.safeTransfer(msg.sender, totalAmount);

        emit InvestmentWithdrawn(tokenId, msg.sender, investment.amount, totalAmount - investment.amount);
    }

    // ============ MULTISIG FUNCTIONS ============

    /**
     * @dev Propose to collect funds for a specific investment
     * @param tokenId Token ID of the investment
     */
    function proposeCollectFunds(uint256 tokenId) external onlyMultisigSigner validTokenId(tokenId) {
        Investment storage investment = investments[tokenId];

        if (investment.fundsCollected) revert FundsAlreadyCollected();
        if (investment.isWithdrawn) revert InvestmentAlreadyWithdrawn();

        bytes32 txHash = _generateTransactionHash(tokenId, TransactionType.COLLECT_FUNDS);

        if (transactions[txHash].proposer != address(0)) {
            // Transaction already exists, just sign it
            _signTransaction(txHash);
        } else {
            // Create new transaction
            Transaction storage txn = transactions[txHash];
            txn.tokenId = tokenId;
            txn.proposer = msg.sender;
            txn.proposedAt = block.timestamp;
            txn.txType = TransactionType.COLLECT_FUNDS;

            pendingCollections[tokenId] = txHash;

            emit TransactionProposed(txHash, tokenId, msg.sender, TransactionType.COLLECT_FUNDS);

            // Proposer automatically signs
            _signTransaction(txHash);
        }
    }

    /**
     * @dev Propose to return funds for a specific investment
     * @param tokenId Token ID of the investment
     */
    function proposeReturnFunds(uint256 tokenId) external onlyMultisigSigner validTokenId(tokenId) {
        Investment storage investment = investments[tokenId];

        if (!investment.fundsCollected) revert FundsNotCollected();
        if (investment.isWithdrawn) revert InvestmentAlreadyWithdrawn();

        bytes32 txHash = _generateTransactionHash(tokenId, TransactionType.RETURN_FUNDS);

        if (transactions[txHash].proposer != address(0)) {
            // Transaction already exists, just sign it
            _signTransaction(txHash);
        } else {
            // Create new transaction
            Transaction storage txn = transactions[txHash];
            txn.tokenId = tokenId;
            txn.proposer = msg.sender;
            txn.proposedAt = block.timestamp;
            txn.txType = TransactionType.RETURN_FUNDS;

            pendingReturns[tokenId] = txHash;

            emit TransactionProposed(txHash, tokenId, msg.sender, TransactionType.RETURN_FUNDS);

            // Proposer automatically signs
            _signTransaction(txHash);
        }
    }

    /**
     * @dev Sign a pending transaction
     * @param txHash Hash of the transaction to sign
     */
    function signTransaction(bytes32 txHash) external onlyMultisigSigner {
        _signTransaction(txHash);
    }

    /**
     * @dev Execute a fully signed transaction
     * @param txHash Hash of the transaction to execute
     */
    function executeTransaction(bytes32 txHash) external onlyMultisigSigner {
        Transaction storage txn = transactions[txHash];

        if (txn.proposer == address(0)) revert TransactionNotFound();
        if (txn.executed) revert TransactionAlreadyExecuted();
        if (txn.signatureCount < multisigConfig.threshold) revert InsufficientSignatures();

        txn.executed = true;
        txn.executedAt = block.timestamp;

        if (txn.txType == TransactionType.COLLECT_FUNDS) {
            _executeCollectFunds(txn.tokenId, msg.sender);
        } else if (txn.txType == TransactionType.RETURN_FUNDS) {
            _executeReturnFunds(txn.tokenId, msg.sender);
        }

        emit TransactionExecuted(txHash, txn.tokenId, msg.sender);
    }

    /**
     * @dev Set actual returns for matured investments (requires multisig approval)
     * @param tokenIds Array of token IDs to mature
     * @param actualReturns Array of actual return amounts
     */
    function setActualReturns(uint256[] calldata tokenIds, uint256[] calldata actualReturns)
        external
        onlyRole(MULTISIG_ROLE)
    {
        require(tokenIds.length == actualReturns.length, "Array length mismatch");

        for (uint256 i = 0; i < tokenIds.length; i++) {
            Investment storage investment = investments[tokenIds[i]];

            if (block.timestamp >= investment.maturityTime && !investment.isMatured) {
                investment.actualReturn = actualReturns[i];
                investment.isMatured = true;

                emit InvestmentMatured(tokenIds[i], actualReturns[i]);
            }
        }
    }

    // ============ ADMIN FUNCTIONS ============

    /**
     * @dev Update market configuration
     * @param _lockDuration New lock duration
     * @param _expectedRate New expected rate
     * @param _acceptingDeposits Whether to accept new deposits
     */
    function updateMarketConfig(uint256 _lockDuration, uint256 _expectedRate, bool _acceptingDeposits)
        external
        onlyRole(ADMIN_ROLE)
    {
        if (_lockDuration < 1 days || _lockDuration > 365 days) revert InvalidDuration();
        if (_expectedRate > 5000) revert InvalidRate(); // Max 50% APY

        marketConfig.lockDuration = _lockDuration;
        marketConfig.expectedRate = _expectedRate;
        marketConfig.acceptingDeposits = _acceptingDeposits;

        emit MarketConfigUpdated(_lockDuration, _expectedRate, _acceptingDeposits);
    }

    /**
     * @dev Update multisig configuration
     * @param _signers Array of new signers
     * @param _threshold New threshold
     */
    function updateMultisigConfig(address[] memory _signers, uint256 _threshold) external onlyRole(ADMIN_ROLE) {
        _setupMultisig(_signers, _threshold);
        emit MultisigConfigUpdated(_signers, _threshold);
    }

    /**
     * @dev Pause the contract
     */
    function pause() external onlyRole(PAUSER_ROLE) {
        _pause();
    }

    /**
     * @dev Unpause the contract
     */
    function unpause() external onlyRole(PAUSER_ROLE) {
        _unpause();
    }

    // ============ VIEW FUNCTIONS ============

    /**
     * @dev Get investment details
     * @param tokenId The NFT token ID
     * @return investment The investment struct
     */
    function getInvestment(uint256 tokenId) external view returns (Investment memory) {
        return investments[tokenId];
    }

    /**
     * @dev Get user's investment token IDs
     * @param user Address of the user
     * @return tokenIds Array of token IDs owned by the user
     */
    function getUserInvestments(address user) external view returns (uint256[] memory) {
        return userInvestments[user];
    }

    /**
     * @dev Get total contract balance
     * @return balance Total cNGN balance
     */
    function getContractBalance() external view returns (uint256) {
        return cNGN.balanceOf(address(this));
    }

    /**
     * @dev Get multisig configuration
     * @return signers Array of authorized signers
     * @return threshold Number of signatures required
     */
    function getMultisigConfig() external view returns (address[] memory signers, uint256 threshold) {
        return (multisigConfig.signers, multisigConfig.threshold);
    }

    /**
     * @dev Get transaction details
     * @param txHash Hash of the transaction
     * @return tokenId Token ID
     * @return proposer Address who proposed
     * @return proposedAt When it was proposed
     * @return executedAt When it was executed
     * @return executed Whether it's executed
     * @return txType Type of transaction
     * @return signatureCount Number of signatures
     */
    function getTransaction(bytes32 txHash)
        external
        view
        returns (
            uint256 tokenId,
            address proposer,
            uint256 proposedAt,
            uint256 executedAt,
            bool executed,
            TransactionType txType,
            uint256 signatureCount
        )
    {
        Transaction storage txn = transactions[txHash];
        return (txn.tokenId, txn.proposer, txn.proposedAt, txn.executedAt, txn.executed, txn.txType, txn.signatureCount);
    }

    /**
     * @dev Check if address has signed a transaction
     * @param txHash Hash of the transaction
     * @param signer Address to check
     * @return signed Whether the address has signed
     */
    function hasSignedTransaction(bytes32 txHash, address signer) external view returns (bool) {
        return transactions[txHash].signatures[signer];
    }

    /**
     * @dev Check if investment is withdrawable
     * @param tokenId The NFT token ID
     * @return withdrawable Whether the investment can be withdrawn
     */
    function isWithdrawable(uint256 tokenId) external view returns (bool) {
        Investment memory investment = investments[tokenId];
        return !investment.isWithdrawn && block.timestamp >= investment.maturityTime;
    }

    // ============ INTERNAL FUNCTIONS ============

    /**
     * @dev Setup multisig configuration
     * @param _signers Array of signers
     * @param _threshold Required signatures
     */
    function _setupMultisig(address[] memory _signers, uint256 _threshold) internal {
        if (_signers.length < MIN_MULTISIG_THRESHOLD || _signers.length > MAX_MULTISIG_SIGNERS) {
            revert InvalidMultisigConfig();
        }
        if (_threshold < MIN_MULTISIG_THRESHOLD || _threshold > _signers.length) {
            revert InvalidMultisigConfig();
        }

        // Clear existing signers
        for (uint256 i = 0; i < multisigConfig.signers.length; i++) {
            multisigConfig.isSigner[multisigConfig.signers[i]] = false;
            _revokeRole(MULTISIG_ROLE, multisigConfig.signers[i]);
        }

        // Set new signers
        multisigConfig.signers = _signers;
        multisigConfig.threshold = _threshold;

        for (uint256 i = 0; i < _signers.length; i++) {
            if (_signers[i] == address(0)) revert InvalidMultisigConfig();
            multisigConfig.isSigner[_signers[i]] = true;
            _grantRole(MULTISIG_ROLE, _signers[i]);
        }
    }

    /**
     * @dev Generate transaction hash
     * @param tokenId Token ID
     * @param txType Transaction type
     * @return txHash Generated hash
     */
    function _generateTransactionHash(uint256 tokenId, TransactionType txType) internal view returns (bytes32) {
        return keccak256(abi.encodePacked(tokenId, txType, multisigConfig.nonce, block.chainid, address(this)));
    }

    /**
     * @dev Sign a transaction
     * @param txHash Hash of the transaction
     */
    function _signTransaction(bytes32 txHash) internal {
        Transaction storage txn = transactions[txHash];

        if (txn.proposer == address(0)) revert TransactionNotFound();
        if (txn.executed) revert TransactionAlreadyExecuted();
        if (txn.signatures[msg.sender]) revert AlreadySigned();

        txn.signatures[msg.sender] = true;
        txn.signatureCount++;

        emit TransactionSigned(txHash, msg.sender, txn.signatureCount);
    }

    /**
     * @dev Execute collect funds transaction
     * @param tokenId Token ID to collect funds for
     * @param collector Address executing the collection
     */
    function _executeCollectFunds(uint256 tokenId, address collector) internal {
        Investment storage investment = investments[tokenId];

        if (investment.amount > cNGN.balanceOf(address(this))) revert InsufficientFunds();

        investment.fundsCollected = true;
        investment.collectedBy = collector;
        investment.collectedAt = block.timestamp;

        cNGN.safeTransfer(collector, investment.amount);

        // Clean up pending transaction
        delete pendingCollections[tokenId];

        emit FundsCollected(tokenId, collector, investment.amount);
    }

    /**
     * @dev Execute return funds transaction
     * @param tokenId Token ID to return funds for
     * @param returner Address executing the return
     */
    function _executeReturnFunds(uint256 tokenId, address returner) internal {
        Investment storage investment = investments[tokenId];

        uint256 returnAmount = investment.amount + investment.expectedReturn;

        cNGN.safeTransferFrom(returner, address(this), returnAmount);

        // Clean up pending transaction
        delete pendingReturns[tokenId];

        emit FundsReturned(tokenId, returner, returnAmount);
    }

    /**
     * @dev Calculate expected return for an investment
     * @param amount Investment amount
     * @return expectedReturn Expected return amount
     */
    function _calculateExpectedReturn(uint256 amount) internal view returns (uint256) {
        // Simple interest calculation: (amount * rate * time) / (BASIS_POINTS * 365 days)
        uint256 timeInSeconds = marketConfig.lockDuration;
        return (amount * marketConfig.expectedRate * timeInSeconds) / (BASIS_POINTS * 365 days);
    }

    /**
     * @dev Override transfer functions to make tokens non-transferable
     */
    function _update(address to, uint256 tokenId, address auth) internal override returns (address) {
        address from = _ownerOf(tokenId);

        // Allow minting and burning but not transfers
        if (from != address(0) && to != address(0)) {
            revert TokenNotTransferable();
        }

        return super._update(to, tokenId, auth);
    }

    // ============ CONTEXT OVERRIDES ============

    /**
     * @dev Override _msgSender to resolve conflict
     */
    function _msgSender() internal view override(Context, ContextUpgradeable) returns (address) {
        return super._msgSender();
    }

    /**
     * @dev Override _msgData to resolve conflict
     */
    function _msgData() internal view override(Context, ContextUpgradeable) returns (bytes calldata) {
        return super._msgData();
    }

    /**
     * @dev Override _contextSuffixLength to resolve conflict
     */
    function _contextSuffixLength() internal view override(Context, ContextUpgradeable) returns (uint256) {
        return super._contextSuffixLength();
    }

    /**
     * @dev Required by UUPSUpgradeable
     */
    function _authorizeUpgrade(address newImplementation) internal override onlyRole(ADMIN_ROLE) {}

    /**
     * @dev Required by AccessControl
     */
    function supportsInterface(bytes4 interfaceId)
        public
        view
        override(ERC721Upgradeable, AccessControl)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}
